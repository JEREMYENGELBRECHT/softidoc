import { ComponentFactoryResolver, ElementRef, EventEmitter, ViewContainerRef } from '@angular/core';
import { IntegralUIBaseComponent, IntegralUIBaseService, IntegralUIHeaderItem } from './integralui.core';
import { IntegralUICommonService } from '../services/integralui.common.service';
export declare class IntegralUIGroupBox extends IntegralUIBaseComponent {
    protected commonService: IntegralUICommonService;
    protected cmpResolver: ComponentFactoryResolver;
    protected baseService: IntegralUIBaseService;
    protected expandState: string;
    protected isExpanded: boolean;
    protected isSelected: boolean;
    protected supressCallback: boolean;
    protected contentHeight: string;
    protected contentDisplay: string;
    protected contentOpacity: number;
    protected maxBlockHeight: number;
    controlElem: ElementRef;
    contentRef: ViewContainerRef;
    contentElem: ElementRef;
    header: IntegralUIHeaderItem;
    protected parentCtrl: any;
    protected contentClassName: string;
    protected headerClassName: string;
    protected headerExpandBoxClassName: string;
    protected contentClass: Array<any>;
    protected headerBlockClass: Array<any>;
    text: string;
    icon: string;
    expandBoxType: string;
    expanded: boolean;
    selected: boolean;
    afterCollapse: EventEmitter<any>;
    afterExpand: EventEmitter<any>;
    beforeCollapse: EventEmitter<any>;
    beforeExpand: EventEmitter<any>;
    selectedChanged: EventEmitter<any>;
    afterSelect: EventEmitter<any>;
    beforeSelect: EventEmitter<any>;
    protected callBeforeEvent(value?: boolean): boolean;
    protected callAfterEvent(value?: boolean): boolean;
    constructor(commonService?: IntegralUICommonService, cmpResolver?: ComponentFactoryResolver, baseService?: IntegralUIBaseService);
    ngOnInit(): void;
    ngAfterContentInit(): void;
    ngOnDestroy(): void;
    protected onHeaderClick(e: any): void;
    collapse(): void;
    expand(): void;
    toggle(): void;
    protected toggleContent(): void;
    getContentHeight(): number;
    setContentHeight(value: any): void;
    protected updateContentClass(): void;
    protected getContentClass(): any[];
    protected getContentStyle(value: any): any;
    private updateHeaderBlockClass();
    protected getHeaderBlockClass(): any[];
    protected getHeaderClass(): string;
    protected getHeaderGeneralStyle(value: any): any;
    protected getHeaderStyle(value: any): {
        general: any;
        expandBox: any;
    };
    protected getCurrentHeaderStyle(): any;
    setOpacity(value: any): void;
    protected updateStyle(value: any): void;
}
