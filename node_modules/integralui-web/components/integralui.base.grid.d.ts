import { ComponentFactoryResolver, ElementRef, EventEmitter, Renderer } from '@angular/core';
import { IntegralUIBaseComponent, IntegralUISelectionMode } from './integralui.core';
import { IntegralUICommonService } from '../services/integralui.common.service';
import { IntegralUIDataService } from '../services/integralui.data.service';
import { IntegralUIDragDropService } from '../services/integralui.dragdrop.service';
export declare enum IntegralUIGridLines {
    None = 0,
    Horizontal = 1,
    Vertical = 2,
    Both = 3,
}
export declare class IntegralUIBaseGrid extends IntegralUIBaseComponent {
    protected dataService: IntegralUIDataService;
    protected dragDropService: IntegralUIDragDropService;
    protected elemRef: ElementRef;
    protected elemRenderer: Renderer;
    protected commonService: IntegralUICommonService;
    protected cmpResolver: ComponentFactoryResolver;
    protected currentColumnList: Array<any>;
    protected currentRowList: Array<any>;
    protected options: any;
    protected columnList: Array<any>;
    protected rowList: Array<any>;
    protected columnDataKey: string;
    protected rowDataKey: string;
    private dropMarkElem;
    private dragCmpRef;
    private dragCmp;
    private cloneElem;
    private cloneElemStartPos;
    protected hoverColumn: any;
    protected hoverRow: any;
    protected currentScrollPos: {
        x: number;
        y: number;
    };
    protected maxScrollPos: {
        x: number;
        y: number;
    };
    protected currentSelectedColumn: any;
    protected currentSelectedRow: any;
    protected currentSelectionMode: IntegralUISelectionMode;
    private shiftFirstSelectedRow;
    private removeIndex;
    protected currentSelectedRows: Array<any>;
    appRef: any;
    columns: Array<any>;
    rows: Array<any>;
    gridLines: IntegralUIGridLines;
    rowHeight: number;
    allowDrag: boolean;
    allowDrop: boolean;
    dataFields: any;
    paging: any;
    selectedColumn: any;
    selectedRow: any;
    selectionMode: IntegralUISelectionMode;
    afterSelect: EventEmitter<any>;
    beforeSelect: EventEmitter<any>;
    columnAdding: EventEmitter<any>;
    columnAdded: EventEmitter<any>;
    columnRemoving: EventEmitter<any>;
    columnRemoved: EventEmitter<any>;
    columnsCleared: EventEmitter<any>;
    dragDrop: EventEmitter<any>;
    dragOver: EventEmitter<any>;
    rowAdding: EventEmitter<any>;
    rowAdded: EventEmitter<any>;
    rowClick: EventEmitter<any>;
    rowDblClick: EventEmitter<any>;
    rowRemoving: EventEmitter<any>;
    rowRemoved: EventEmitter<any>;
    rowsCleared: EventEmitter<any>;
    loadComplete: EventEmitter<any>;
    scrollPosChanged: EventEmitter<any>;
    selectionChanged: EventEmitter<any>;
    updateComplete: EventEmitter<any>;
    constructor(dataService: IntegralUIDataService, dragDropService: IntegralUIDragDropService, elemRef: ElementRef, elemRenderer: Renderer, commonService?: IntegralUICommonService, cmpResolver?: ComponentFactoryResolver);
    ngOnInit(): void;
    addColumn(column: any): void;
    clearColumns(): void;
    insertColumnAt(column: any, index: number): void;
    insertColumnBefore(column: any, refColumn: any): void;
    insertColumnAfter(column: any, refColumn: any): void;
    removeColumn(column: any): boolean;
    removeColumnAt(index: number): boolean;
    protected callEventAddColumn(type: string, column: any, index?: number, refColumn?: any, flag?: boolean): void;
    protected callEventRemoveColumn(column: any, index?: number): boolean;
    addRow(row: any, parent?: any): void;
    clearRows(parent?: any): void;
    insertRowAt(row: any, index: number, parent?: any): void;
    insertRowBefore(row: any, refRow: any): void;
    insertRowAfter(row: any, refRow: any): void;
    removeRow(row: any): boolean;
    removeRowAt(index: number, parent?: any): boolean;
    protected callEventAddRow(type: string, row: any, index?: number, parent?: any, refRow?: any, flag?: boolean): void;
    protected callEventRemoveRow(row: any, index?: number, parent?: any): boolean;
    protected updateDataFields(data?: any): void;
    protected updateOptions(value?: any): void;
    protected updateColumnFields(fields?: any): void;
    protected updateRowFields(fields?: any): void;
    protected updateCellFields(fields?: any): void;
    protected processLoadData(data: Array<any>, parent?: any, fields?: any, flat?: boolean): void;
    private addDropMark(pos);
    protected removeDropMark(): void;
    protected callDragDropEvent(e: any, data: any, flag?: boolean): boolean;
    private checkEmptySpace(e);
    private ctrlDragDrop(e);
    protected ctrlDragLeave(e: any): void;
    private ctrlDragOver(e);
    private dropMark(e, flag?);
    private updateDragComponent(value);
    protected isDragAllowed(row: any): boolean;
    protected isDropAllowed(sourceData: any, targetRow: any, dropPos: number): any;
    protected processDragStart(e: any, row: any): void;
    protected processDragOver(e: any, row?: any, rowBounds?: any, flag?: boolean): void;
    protected processDragDrop(e: any, row?: any): void;
    protected drop(e: any, data: any): void;
    protected processDataDrop(e: any, row: any, data: any): void;
    protected callAfterSelectEvent(obj: any): void;
    cloneRow(row: any): any;
    getList(key?: string): any;
    protected getObjFromRow(row: any): any;
    protected getRowCurrentIndex(row: any): number;
    getRowFromComponent(cmp: any): any;
    protected isChildOf(targetRow: any, row: any): boolean;
    protected isComponentIndexInRange(index: number): boolean;
    protected isIndexInRange(index: number): boolean;
    protected isRowAllowed(row: any, flag?: boolean): boolean;
    protected isRowEnabled(row: any): boolean;
    protected isRowFixed(row: any): boolean;
    protected isRowHovered(row: any): boolean;
    protected isRowSelected(row: any): boolean;
    protected isParentOf(targetRow: any, row: any): boolean;
    protected getContentSize(): {
        width: number;
        height: number;
    };
    refresh(obj?: any): void;
    updateLayout(): void;
    onWindowMouseMove(e: any): void;
    onWindowMouseUp(e: any): void;
    private updateCloneElemPos(e);
    protected onCtrlMouseEnter(e: any): void;
    protected onCtrlMouseLeave(e: any): void;
    private setCloneElem(clone, pos);
    private appendCloneElem();
    private closeCloneElem();
    private updatePaging(value?);
    scrollPos(value?: any): any;
    findRowById(id: any): any;
    findRowByText(text: string): any;
    protected processColumnSelection(e: any, column: any, value?: any): any;
    protected clearComponentSelection(): void;
    private clearPrevSelection(row?);
    private isRowInSelectionList(row);
    protected processRowSelection(e: any, row: any, value?: any): void;
    selectRows(rows: Array<any>): void;
    protected updateRowSelection(e: any, row: any): void;
}
