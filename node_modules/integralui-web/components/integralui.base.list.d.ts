import { ComponentFactoryResolver, ElementRef, EventEmitter, Renderer } from '@angular/core';
import { IntegralUIBaseComponent, IntegralUISelectionMode } from './integralui.core';
import { IntegralUICommonService } from '../services/integralui.common.service';
import { IntegralUIDataService } from '../services/integralui.data.service';
import { IntegralUIDragDropService } from '../services/integralui.dragdrop.service';
export declare class IntegralUIBaseList extends IntegralUIBaseComponent {
    protected dataService: IntegralUIDataService;
    protected dragDropService: IntegralUIDragDropService;
    protected elemRef: ElementRef;
    protected elemRenderer: Renderer;
    protected commonService: IntegralUICommonService;
    protected cmpResolver: ComponentFactoryResolver;
    protected currentList: Array<any>;
    protected options: any;
    protected itemList: Array<any>;
    private dropMarkElem;
    private dragCmpRef;
    private dragCmp;
    private cloneElem;
    private cloneElemStartPos;
    protected currentScrollPos: any;
    protected maxScrollPos: any;
    protected currentSelection: any;
    protected currentSelectionMode: IntegralUISelectionMode;
    private shiftFirstSelectedItem;
    private removeIndex;
    protected currentSelectedItems: Array<any>;
    appRef: any;
    items: Array<any>;
    allowDrag: boolean;
    allowDrop: boolean;
    selectedItem: any;
    selectionMode: IntegralUISelectionMode;
    afterSelect: EventEmitter<any>;
    beforeSelect: EventEmitter<any>;
    clear: EventEmitter<any>;
    dragDrop: EventEmitter<any>;
    dragOver: EventEmitter<any>;
    itemAdding: EventEmitter<any>;
    itemAdded: EventEmitter<any>;
    itemRemoving: EventEmitter<any>;
    itemRemoved: EventEmitter<any>;
    loadComplete: EventEmitter<any>;
    scrollPosChanged: EventEmitter<any>;
    selectionChanged: EventEmitter<any>;
    updateComplete: EventEmitter<any>;
    constructor(dataService: IntegralUIDataService, dragDropService: IntegralUIDragDropService, elemRef: ElementRef, elemRenderer: Renderer, commonService?: IntegralUICommonService, cmpResolver?: ComponentFactoryResolver);
    ngOnInit(): void;
    addItem(item: any, parent?: any): void;
    clearItems(parent?: any): void;
    insertItemAt(item: any, index: number, parent?: any): void;
    insertItemBefore(item: any, refItem: any): void;
    insertItemAfter(item: any, refItem: any): void;
    removeItem(item: any): boolean;
    removeItemAt(index: number, parent?: any): boolean;
    protected callEventAdd(type: string, item: any, index?: number, parent?: any, refItem?: any, flag?: boolean): void;
    protected callEventRemove(item: any, index?: number, parent?: any): boolean;
    protected updateOptions(value?: any): void;
    protected updateDataFields(fields?: any): void;
    protected processLoadData(data: Array<any>, parent?: any, fields?: any, flat?: boolean): void;
    protected updateItem(item: any): void;
    private addDropMark(pos);
    protected removeDropMark(): void;
    protected callDragDropEvent(e: any, data: any, flag?: boolean): boolean;
    private checkEmptySpace(e);
    private ctrlDragDrop(e);
    protected ctrlDragLeave(e: any): void;
    private ctrlDragOver(e);
    private dropMark(e, flag?);
    private updateDragComponent(value);
    protected isDragAllowed(item: any): boolean;
    protected isDropAllowed(sourceData: any, targetItem: any, dropPos: number): any;
    protected processDragStart(e: any, item: any): void;
    protected processDragOver(e: any, item?: any, itemBounds?: any, flag?: boolean): void;
    protected processDragDrop(e: any, item?: any): void;
    protected drop(e: any, data: any): void;
    protected processDataDrop(e: any, item: any, data: any): void;
    protected callAfterSelectEvent(item: any): void;
    cloneItem(item: any): any;
    protected getItemCurrentIndex(item: any): number;
    getItemFromComponent(cmp: any): any;
    getList(key?: string): any;
    invokeMethod(key: string, data: any): boolean;
    protected isChildOf(targetItem: any, item: any): boolean;
    protected isComponentIndexInRange(index: number): boolean;
    protected isIndexInRange(index: number): boolean;
    protected isItemAllowed(item: any): true;
    protected isItemEnabled(item: any): boolean;
    protected isParentOf(targetItem: any, item: any): boolean;
    protected getContentSize(): {
        width: number;
        height: number;
    };
    refresh(): void;
    updateLayout(): void;
    onWindowMouseMove(e: any): void;
    onWindowMouseUp(e: any): void;
    private updateCloneElemPos(e);
    protected onCtrlMouseEnter(e: any): void;
    protected onCtrlMouseLeave(e: any): void;
    private setCloneElem(clone, pos);
    private appendCloneElem();
    private closeCloneElem();
    onScroll(e: any): void;
    scrollPos(value?: any): any;
    findItemById(id: any): any;
    findItemByText(text: string): any;
    protected clearComponentSelection(): void;
    private clearPrevSelection(item?);
    private isItemInSelectionList(item);
    protected processSelection(e: any, item: any, value?: any): boolean;
    selectItems(items: Array<any>): void;
    protected updateSelection(e: any, item: any): void;
}
